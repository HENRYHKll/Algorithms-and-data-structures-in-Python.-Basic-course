1.	Написать программу, которая будет складывать, вычитать, умножать или делить
два числа. Числа и знак операции вводятся пользователем. После выполнения
вычисления программа не должна завершаться, а должна запрашивать новые данные
для вычислений. Завершение программы должно выполняться при вводе символа '0'
в качестве знака операции. Если пользователь вводит неверный знак
(не '0', '+', '-', '*', '/'), то программа должна сообщать ему об ошибке и
снова запрашивать знак операции.
Также сообщать пользователю о невозможности деления на ноль,
если он ввел 0 в качестве делителя.

def operations():
    def num(position):
        global answer
        answer = input("Введите {} число: " .format(position))
        return answer
    def oper():
        global operation
        operation = input("Введите операцию(+ - * /): ")
        if operation != "+" and operation != "-" and operation != "*" and operation != "/":
            print("Неверный знак операции!")
            oper()
    answer = input("Для выхода введите 0: ")
    if answer == "0":
        print("BB")
    else:
        first = num(1)
        second = num(2)
        oper()
        if operation == "-":
            print(first, operation, second, "=", int(first) - int(second))
            operations()
        elif operation == "+":
            print(first, operation, second, "=", int(first) + int(second))
            operations()
        elif operation == "*":
            print(first, operation, second, "=", str(int(first) * int(second)))
            operations()
        elif operation == "/":
            print(first, operation, second, "=", int(first) / int(second))
            operations()

operations()

2.	Посчитать четные и нечетные цифры введенного натурального числа.
Например, если введено число 34560, то у него 3 четные цифры
(4, 6 и 0) и 2 нечетные (3 и 5).


def number():
    while True:
        ans = input("Посчитать четные и нечетные цифры числа (0 - нет): ")
        if ans == "0":
            print("BB")
            break
        else:
            c = 0
            nc = 0        
            number = input("Введите число: ")
            for i in number:
                if int(i) % 2 == 0:
                    c += 1
                else: 
                    nc += 1
            print("В числе {} присутсвуют {} четных и {} нечетных цифр." .format(number, c, nc))
        

number()

3.	Сформировать из введенного числа обратное по порядку входящих в него
цифр и вывести на экран. Например, если введено число 3486,
 то надо вывести число 6843.

def num():
    number = input("Для реверсирования числа необходимо его ввести(0 - выход): ")
    if number == "0":
        print("BB")
    else:
        a = ""
        b = ""
        c = ""
        for i in number:
            c = i + c
        print("Реверс числа {} равняется {}" .format(number, c))
        num()

num()

4.	Найти сумму n элементов следующего ряда чисел: 1 -0.5 0.25 -0.125 ...
Количество элементов (n) вводится с клавиатуры.



while True:
    answer = input("Введите n член последовательности(0 - выход): ")
    if answer == "0":
        print("BB")
        break
    else:
        ans = int(answer)
        f = 1
        n = 1
        g = 1
        while n <= ans - 1:
            f = f / (-2)
            g = g + f
            n += 1
        print("Cумма последовательности равна {}" .format(g))
        
5.	Вывести на экран коды и символы таблицы ASCII, начиная с символа
под номером 32 и заканчивая 127-м включительно.
Вывод выполнить в табличной форме: по десять пар "код-символ" в каждой строке.


def s():
    a = input("Вывести (0 - нет): ")
    if a == "0":
        print("BB")
    else:
        for i in range(32,128):
            print("%4d-%s" % (i,chr(i)), end='')
            if i % 10 == 0:
                print()
        print()
        s()
s()

6.	В программе генерируется случайное целое число от 0 до 100.
Пользователь должен его отгадать не более чем за 10 попыток. После каждой
неудачной попытки должно сообщаться больше или меньше введенное пользователем
число, чем то, что загадано. Если за 10 попыток число не отгадано,
то вывести загаданное число.


import random
def z():
    def g(us, rel):
        m = 0
        if int(us) == rel:
            print("Угадал!")
            m = 1
        elif int(us) < rel:
            print("Больше")
        elif int(us) > rel:
            print("Меньше")
        return m
    a = input("Отгадай число от 0 до 100, играем? (0 - нет): ")
    if a == "0":
        print("BB")
    else:
        i = 0
        c = random.randint(0, 100)
        m = 0
        while i < 10 and m == 0:
            b = input("Предположения: ")
            m = g(b, c)
            i += 1
        print("Загаданное число - " + str(c))
        z()
z()

7.	Напишите программу, доказывающую или проверяющую, что для множества
натуральных чисел выполняется равенство: 1+2+...+n = n(n+1)/2,
 где n - любое натуральное число.


def mn():
    a = 1 + 2 + 3 + 4 + 5
    n = 5
    if a == n * (n + 1) / 2:
        print("Формула верна!")
    else:
        print("Что-то не то...")
mn()

8.	Посчитать, сколько раз встречается определенная цифра в введенной
 последовательности чисел. Количество вводимых чисел и цифра,
 которую необходимо посчитать, задаются вводом с клавиатуры.


def gr():
    a = input("Введите число, количество цифр которой надо посчитать: ")
    b = input("Введите подсчитываемую цифру: ")
    c = 0
    for i in a:
        if i == b:
            c += 1
    print(c)

gr()

9. Среди натуральных чисел, которые были введены, найти
наибольшее по сумме цифр. Вывести на экран это число и сумму его цифр.


while True:
    def fort(g):
        c = 0
        for i in g:
            c += int(i)
        return c
    a = input("Введите первое число: ")
    b = input("Введите второе число: ")
    c = fort(a)
    d = fort(b)
    if c > d:
        print("Наибольшее число - {}, сумма его цифр равна {}" .format(a, c))
    elif c < d:
        print("Наибольшее число - {}, сумма его цифр равна {}" .format(b, d))
    else:
        print("Числа равны!")
    break
